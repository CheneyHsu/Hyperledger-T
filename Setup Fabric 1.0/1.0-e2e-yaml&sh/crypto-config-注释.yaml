# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

# ---------------------------------------------------------------------------
# "OrdererOrgs" - Definition of organizations managing orderer nodes
# ---------------------------------------------------------------------------
OrdererOrgs:   //构成Orderer集群节点的所属组织
  # ---------------------------------------------------------------------------
  # Orderer
  # ---------------------------------------------------------------------------
  - Name: Orderer //名称
    Domain: example.com  //命名域
    # ---------------------------------------------------------------------------
    # "Specs" - See PeerOrgs below for complete description
    # ---------------------------------------------------------------------------
    Specs: 
      - Hostname: orderer

  //每个主机的配置一般可以通过Specs来指定或通过Template来自动顺序生成，默认通用名为主机名.组织域。
  //例如域org1.example.com中Peer节点的名称可能为peer0.org1.example.com、peer1.org1.example.com等。
# ---------------------------------------------------------------------------
# "PeerOrgs" - Definition of organizations managing peer nodes
# ---------------------------------------------------------------------------
PeerOrgs:  //构成Peer节点的所属组织
  # ---------------------------------------------------------------------------
  # Org1
  # ---------------------------------------------------------------------------
  - Name: Org1
    Domain: org1.example.com
    # ---------------------------------------------------------------------------
    # "Specs"
    # ---------------------------------------------------------------------------
    # Uncomment this section to enable the explicit definition of hosts in your
    # configuration.  Most users will want to use Template, below
    #
    # Specs is an array of Spec entries.  Each Spec entry consists of two fields:
    #   - Hostname:   (Required) The desired hostname, sans the domain.
    #   - CommonName: (Optional) Specifies the template or explicit override for
    #                 the CN.  By default, this is the template:
    #
    #                              "{{.Hostname}}.{{.Domain}}"
    #
    #                 which obtains its values from the Spec.Hostname and
    #                 Org.Domain, respectively.
    # ---------------------------------------------------------------------------
    # Specs:
    #   - Hostname: foo # implicitly "foo.org1.example.com"
    #     CommonName: foo27.org5.example.com # overrides Hostname-based FQDN set above
    #   - Hostname: bar
    #   - Hostname: baz
    # ---------------------------------------------------------------------------
    # "Template"
    # ---------------------------------------------------------------------------
    # Allows for the definition of 1 or more hosts that are created sequentially
    # from a template. By default, this looks like "peer%d" from 0 to Count-1.
    # You may override the number of nodes (Count), the starting index (Start)
    # or the template used to construct the name (Hostname).
    #
    # Note: Template and Specs are not mutually exclusive.  You may define both
    # sections and the aggregate nodes will be created for you.  Take care with
    # name collisions
    # ---------------------------------------------------------------------------
    Template:
      Count: 2
      # Start: 5
      # Hostname: {{.Prefix}}{{.Index}} # default
    # ---------------------------------------------------------------------------
    # "Users"
    # ---------------------------------------------------------------------------
    # Count: The number of user accounts _in addition_ to Admin
    # ---------------------------------------------------------------------------
    Users:
      Count: 1
  # ---------------------------------------------------------------------------
  # Org2: See "Org1" for full specification
  # ---------------------------------------------------------------------------
  - Name: Org2
    Domain: org2.example.com
    Template:
      Count: 2
    Users:
      Count: 1

      //上面的示例配置中，Orderer组织通过Specs字段指定了一个主机order.example.com；而两个Peer组织则采用
      //Template来自动生成了Count个数的主机。
    //同样，Users字段下的Count字段值会让cryptogen工具以自动顺序生成指定个数的普通用户（除默认的Admin用户外）。




//
操作过程：
根据指定的配置文件来生成相应的密钥和证书文件：
$ cryptogen generate \
--config $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli/crypto-
config.yaml \
--output crypto-config
查看当前目录下的crypto-config目录，生成ordererOrganizations和peerOrganizations两棵组织树。每个组织树下都包括ca、msp、orderers（或peers）、users四个子目录。
以peerOrganizations组织树为例，每个目录和文件对应的功能讲解如下。
1.org1
第一个组织的相关材料，每个组织会生成单独的根证书。
·ca：存放组织的根证书和对应的私钥文件，默认采用EC算法，证书为自签名。组织内的实体将基于该根证书作为证书根。
·msp：存放代表该组织的身份信息。
·admincerts：组织管理员的身份验证证书，被根证书签名。
·cacerts：组织的根证书，同ca目录下文件。
·tlscacerts：用于TLS的CA证书，自签名。
·peers：存放属于该组织的所有Peer节点。
·peer0：第一个peer的信息，包括其msp证书和tls证书两类。
·msp：
·admincerts：组织管理员的身份验证证书。Peer将基于这些证书来认证交易签署者是否为管理员身份。
·cacerts：存放组织的根证书。
·keystore：本节点的身份私钥，用来签名。
·signcerts：验证本节点签名的证书，被组织根证书签名。
·tlscacerts：TLS连接用的身份证书，即组织TLS证书。
·tls：存放tls相关的证书和私钥
·ca.crt：组织的根证书。
·server.crt：验证本节点签名的证书，被组织根证书签名。
·server.key：本节点的身份私钥，用来签名。
·peer1：第二个peer的信息，结构类似。（此处省略。）
·users：存放属于该组织的用户的实体。
·Admin：管理员用户的信息，包括其msp证书和tls证书两类。
·msp：
·admincerts：组织根证书作为管理者身份验证证书。
·cacerts：存放组织的根证书。
·keystore：本用户的身份私钥，用来签名。
·signcerts：管理员用户的身份验证证书，被组织根证书签名。要被某个Peer认可，则必须放到该Peer的msp/admincerts下。
·tlscacerts：TLS连接用的身份证书，即组织TLS证书。
·tls：存放tls相关的证书和私钥。
·ca.crt：组织的根证书。
·server.crt：管理员的用户身份验证证书，被组织根证书签名。
·server.key：管理员用户的身份私钥，用来签名。
·User1：第一个用户的信息，包括msp证书和tls证书两类。
·msp：
·admincerts：组织根证书作为管理者身份验证证书。
·cacerts：存放组织的根证书。
·keystore：本用户的身份私钥，用来签名。
·signcerts：验证本用户签名的身份证书，被组织根证书签名。
·tlscacerts：TLS连接用的身份证书，即组织TLS证书。
·tls：存放tls相关的证书和私钥。
·ca.crt：组织的根证书。
·server.key：管理员用户的身份私钥，用来签名。
·User1：第一个用户的信息，包括msp证书和tls证书两类。
·msp：
·admincerts：组织根证书作为管理者身份验证证书。
·cacerts：存放组织的根证书。
·keystore：本用户的身份私钥，用来签名。
·signcerts：验证本用户签名的身份证书，被组织根证书签名。
·tlscacerts：TLS连接用的身份证书，即组织TLS证书。
·tls：存放tls相关的证书和私钥。
·ca.crt：组织的根证书。
·keystore：节点的签名私钥文件；
·signcerts：节点的签名身份证书文件；
·tlscacerts：TLS连接用的证书；
·intermediatecerts（可选）：信任的中间证书；
·crls（可选）：证书撤销列表；
·config.yaml（可选）：记录OrganizationalUnitIdentifiers信息，包括根证书位置和ID信息。
这些身份文件随后可以分发到对应的Orderer节点和Peer节点上，并放到对应的MSP路径下，用于签名使用。

